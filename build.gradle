/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.4.1/userguide/tutorial_java_projects.html
 */

plugins {
    // Apply the java plugin to add support for Java
    id 'java'

    // Apply the application plugin to add support for building a CLI application.
    id 'application'
}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()
}

dependencies {
    // This dependency is used by the application.
    implementation(
            'com.google.guava:guava:28.2-jre',
            'com.google.code.gson:gson:2.8.6'
    )

    annotationProcessor 'org.projectlombok:lombok:1.18.12'
    compileOnly 'org.projectlombok:lombok:1.18.12'
    compile(
            'com.google.guava:guava:28.0-jre',
            'junit:junit:4.12'
    )

    // Use JUnit test framework
    testCompile(
            'io.rest-assured:rest-assured:3.1.0',
            'org.hamcrest:hamcrest-all:1.3',
            'org.junit.jupiter:junit-jupiter-api:5.2.0',
            group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: '5.2.0',
            'org.mockito:mockito-core:2.19.0',
            'org.mockito:mockito-junit-jupiter:2.19.0',
    )

    testRuntime(
            'org.junit.jupiter:junit-jupiter-engine:5.2.0',
    )
//    testImplementation 'junit:junit:4.12'
//    testImplementation 'org.mockito:mockito-core:2.7.22'
    testCompileOnly 'org.projectlombok:lombok:1.18.12'
//    testCompile "org.mockito:mockito-core:2.7.22"
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.12'
}

sourceSets {
    main.java.srcDir "/src/main/java"
    main.resources.srcDir "/src/main/resources"
    test.java.srcDir "src/main/test/java"
}

jar {
    manifest {
        attributes(
            'Class-Path': configurations.compile.collect { it.getName() }.join(' '),
            'Main-Class': 'src.main.java.cloudkitchen.App'
        )
    }

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

